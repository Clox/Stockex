@using Newtonsoft.Json.Linq
@{//This file contains all the responses and actions for AJAX-requests
    var db = Database.Open("products");
	switch (Request.Form["action"]) {
		case "createProduct":
			JObject props = JObject.Parse(Request.Form["data"]);
			string keys="";
			string[] values=new string[props.Count];
			string placeHolders="";
			var i=0;
			foreach (var prop in props) {
				values[i]=(string)prop.Value;
				if (i>0) {
					keys+=",";
					placeHolders+=",";
				}
				keys+=prop.Key;
				placeHolders+="@"+i;
				i++;
			}
			db.Execute("INSERT INTO products ("+keys+") VALUES("+placeHolders+")", values);
			@Html.Raw("{\"id\":"+db.GetLastInsertId()+"}");
		break;
		case "updateCell":
			//var updateCommand = "UPDATE products SET Title=@0, Genre=@1, Year=@2 WHERE Id=@3";
			var updateCommand = "UPDATE products SET "+Request.Form["productHeader"]+"=@0 WHERE id=@1";
			db.Execute(updateCommand, Request.Form["newValue"], Request.Form["productId"]);
		break;
		case "test":
			foreach (var key in Request.Form.Keys) {
				@(key);
			}
		break;
	}
}
@* //JS-function for testing functionality of this file
function post_to_url(path, params, method) {
    method = method || "post"; // Set method to post by default, if not specified.

    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);

    for(var key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
         }
    }

    document.body.appendChild(form);
    form.submit();
}
post_to_url("", {action:"createProduct", name:"testis", epd:"6969"});
*@