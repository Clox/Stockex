@{
	//http://psdreview.com/best-free-android-icon-sets-for-developers-and-designers/
	string activeCategory="sjokolade";

	@*The following is a list of product-headers that are to be sent and that will be visible and editable in the html. Their order also determine the order in the html*@
	Dictionary<string, ProductProperty> productProperties =new Dictionary<string, ProductProperty>();
	productProperties.Add("name",new ProductProperty("Name","string",true, true));
	productProperties.Add("epd",new ProductProperty("EPD","int", false, true));
	productProperties.Add("ean",new ProductProperty("EAN","string", false, true));
	productProperties.Add("qntInUnit",new ProductProperty("Quantity in unit","float"));
	productProperties.Add("unit",new ProductProperty("Unit","string"));
	productProperties.Add("producer",new ProductProperty("Producer","string", false, true));

	var db = Database.Open("products");
	string queryCommand;

	queryCommand="SELECT id,"+String.Join(",",productProperties.Keys.ToArray())+" from products WHERE category = 'sjokolade'";

	//selectCommand="SELECT name, ean, epd, qntInUnit, unit, producer from products WHERE category = 'sjokolade'";
	var selectedData = db.Query(queryCommand);
	string jsProductsData="[";

	@*http://blogs.microsoft.co.il/blogs/pini_dayan/archive/2009/03/12/convert-objects-to-json-in-c-using-javascriptserializer.aspx*@
	System.Web.Script.Serialization.JavaScriptSerializer oSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();
	string sJSON = oSerializer.Serialize(productProperties);

	int productNum=0;
		foreach(var product in selectedData){
			jsProductsData+="["+product["id"];
			foreach (string key in productProperties.Keys) {
				jsProductsData+=",";
				jsProductsData+="'"+product[key]+"'";
			}
			jsProductsData+="],";
			if (productNum<selectedData.Count()) {
			productNum++;
			}
		}
		jsProductsData+="]";

		var userData=db.QueryValue("SELECT productProperties FROM userData WHERE userName ='oggan'");
}
<!DOCTYPE html>

<html lang="en">
	<head>
		<meta http-equiv="X-UA-Compatible" content="IE=7" />
		<meta charset="utf-8" />
		<title>Stockex</title>
		<link rel="stylesheet" type="text/css" href="stockexStyle.css">
		<script src="Scripts/jquery-1.9.1.min.js" charset="UTF-8"></script>
		<script src="jquery.rotateTableCellContent.js"></script>
		<script src="json2.js"></script>
	</head>
	<body>
		<div id="tableContainer">
			<table id="mainTable">
				<tbody id="mainTableBody"></tbody>
			</table>
		</div>
		<div id="addNewProduct"></div>
		<script type="text/javascript">
			var productProps=@Html.Raw(sJSON);
			var productDataArray=@Html.Raw(jsProductsData);
			var mainTableBodyInnerHTML = "";
			var cellOriginalValue;@*Holds the initial value of cell which the "new" value is compared with on cell-blur in order to determine if change has been made before sending to server*@//col="+productProps[x].name
			var numProducts=@productNum;
			var productClientId=0;@*When creating a new product, before product-id is available the client first assigns all cells with an internal id
			During callback with context of the productsname-cell it is then easy to find the rest of the cells of the product with this*@
			var category="sjokolade";
			var pendingProductCreations={};@*Whenever a product-creation request is sent to server, the jqXHR object is stored in this variable, with the productClientId as key. When the request finishes the jqXHR object reference is immediately removed
			If a cell-edit is commited to a project which creation is pending, the cell-edit-ajax-request is added as done() to the jqXHR so that it is sent once the product is present on server and the id is known*@
			var userData=@Html.Raw(userData);
			var mainTableBody=document.getElementById("mainTableBody");
			var tr, td, th, cell, cellValue;
			@*determine if rotation is supported - start*@
			var div = document.createElement('div');
			div.setAttribute('style', 'transition:top 1s ease;-webkit-transition:top 1s ease;-moz-transition:top 1s ease;-o-transition:top 1s ease;');
			document.body.appendChild(div);
			var cssTransitionsSupported = !!(div.style.transition || div.style.webkitTransition || div.style.MozTransition || div.style.OTransitionDuration);
			div.parentNode.removeChild(div);
			div = null;
			@*determine if rotation is supported - end*@
			for (var x = 0; x<@productProperties.Count; x++ ) {
				tr=document.createElement("tr");
				tr.appendChild(th=document.createElement("th"));
				var product=productProps[userData[x].n];
				$(th).text(product.displayName);
				for (var y = 0; y<numProducts; y++) {
					tr.appendChild(td=document.createElement("td"));
					td.appendChild(cell=document.createElement("div"));
					cell.style.height=userData[x].h+"px";
					if (product.vertical) {
						cell.style.height=userData[x].h+"px";
						cell.appendChild(cell=document.createElement("div"));
						cell.className+=" vertical";

					}
					cell.contentEditable=true;
					cell.className+=" editable";
					if (!x)
						cell.className+=" nameRow";@*used when finding the name-cell during product creation for setting as context in ajax-call*@
					cell.className+=" id"+productDataArray[y][0];@*Used to quickly select all the cells of a product*@
					cell.spellcheck=false;
					$(cell).on("blur", cellOnBlur)
					.on("focus", cellOnFocus)
					.data("productHeader", userData[x].n)
					.data("productId", productDataArray[y][0])
					.text(productDataArray[y][x+1]);
					switch (product.type) {
						case "int":
							$(cell).keypress(intValidateInput).on("paste", intValidatePaste);
						break
						case "string":
							$(cell).keypress(stringValidateInput).on("paste", stringValidatePaste);
						break;
						case "float":
							$(cell).keypress(floatValidateInput).on("paste", floatValidatePaste);
						break;
					}
					if (product.required)
						cell.className+=" required";
					if (product.vertical)
						if (cssTransitionsSupported) {
							cell.style.height="38px";//size needed for overflow:hidden to work
							cell.style.width=userData[x].h+"px";
							cell.className+=" rotatedCell";
						}
				}
				mainTableBody.appendChild(tr);
			}

			//productDataArray=null;
			document.getElementById("addNewProduct").onclick=addNewProduct;

			function addNewProduct() {@*Function for "creating a new" empty product on client-side before sending to server*@
				$("#mainTableBody .editable").attr("contenteditable", false);@*Make all cells non editable while creating new product*@
				var mainTableBody=document.getElementById("mainTableBody");
				for (var y=0; y<productProps.length; y++) {
					var newCell=mainTableBody.rows[y].insertCell(numProducts+1).appendChild(document.createElement("div"));
					newCell.contentEditable=true;
					newCell.className="newProductInput editable cid"+productClientId;
					if (!y)
					newCell.className+=" nameRow";	
					newCell.spellcheck=false;
					if (productProps[y].required)
						newCell.className+=" required";
					switch (productProps[y].type) {
						case "int":
							$(newCell).keypress(intValidateInput).on("paste", intValidatePaste);
						break;
						case "string":
							$(newCell).keypress(stringValidateInput).on("paste", stringValidatePaste);
						break;
						case "float":
							$(newCell).keypress(floatValidateInput).on("paste", floatValidatePaste);
					}
					if (!y)
					newCell.focus();
					$(newCell).data("productHeader", productProps[y].name).data("productClientId",productClientId);
					
				}
				var buttonContainer;
				document.getElementById("tableContainer").appendChild(buttonContainer=document.createElement("div"));
				buttonContainer.id="newProductButtonContainer";

				var okBtn;
				buttonContainer.appendChild(okBtn=document.createElement("button"));
				okBtn.innerHTML="OK";
				okBtn.id="newProductOkBtn";
				okBtn.onclick=createProduct;

				var cancelBtn;
				buttonContainer.appendChild(cancelBtn=document.createElement("button"));
				cancelBtn.innerHTML="Cancel";
				cancelBtn.id="newProductCancelBtn";
				cancelBtn.onclick=cancelCreateProduct;

				document.getElementById("addNewProduct").style.visibility="hidden";
             
				return false;
			}
			function intValidateInput(evt) {@*http://stackoverflow.com/a/469419*@
				var theEvent = evt || window.event;
				var key = theEvent.keyCode || theEvent.which;
				key = String.fromCharCode( key );
				if(/[^0-9]/.test(key) ) {
					theEvent.returnValue = false;
					if(theEvent.preventDefault) theEvent.preventDefault();
				}
			}
			function intValidatePaste(evt) {
				setTimeout(function(){//Have wrap the code in a timeout (null/0 ms seems to be fine) or else the text from the clipboard wont be present in the textfield yet 
					$(evt.target).text($(evt.target).text().replace(/[^0-9]/g,""))
				});
			}
			function stringValidateInput(evt) {
				var theEvent = evt || window.event;
				var key = theEvent.keyCode || theEvent.which;
				//key = String.fromCharCode( key );
				if(key==9||key==13) {
					theEvent.returnValue = false;
					if(theEvent.preventDefault) theEvent.preventDefault();
				}
			}
			function stringValidatePaste(evt) {
				setTimeout(function(){
					$(evt.target).text($(evt.target).text().replace(/[\n\t]/g,""));
				});
			}
			function floatValidateInput(evt) {
				var theEvent = evt || window.event;
				var key = theEvent.keyCode || theEvent.which;
				key = String.fromCharCode( key );
				if(/[^0-9.]/g.test(key)||(key=="."&&/\./.test($(evt.target).text()))) {
					theEvent.returnValue = false;
					if(theEvent.preventDefault) theEvent.preventDefault();
					return false;
				}
				//floatValidatePaste(evt);
			}
			function floatValidatePaste(evt) {
				setTimeout(function(){
					var result=$(evt.target).text().match(/\d+\.?\d*/);
					if (result)
						$(evt.target).text(result)[0];
					else 
						$(evt.target).text("");
				});
			}
             
			function createProduct() {@*Function for sending new product data to server when OK is clicked*@
				var requiredInputs=$("#mainTableBody .required");
				for (var i=requiredInputs.length-1; i>=0; i--) {
					if (!requiredInputs[i].textContent.length) {
						alert("Please fill all required fields");
						return;
					}
				}
				$("#mainTableBody .editable").attr("contenteditable", true);@*Make all cells editable again*@
				document.getElementById("addNewProduct").style.visibility="visible";
				$("#newProductButtonContainer").remove();
                

				var data={category:category};
				var newProductNameCell=$("#mainTableBody .newProductInput.nameRow");@*will be used as context in ajax call(need to store it before newProductInput-class is removed)*@
				$("#mainTableBody .newProductInput")
				.each(function(key, value) {
					if (value.textContent)
						data[$(value).data("productHeader")]=$(value).text();
				})
				.removeClass("newProductInput")
				.on("blur", cellOnBlur)
				.attr("onfocus", cellOnFocus);
				data={data:JSON.stringify(data), action:"createProduct"};
				pendingProductCreations[numProducts]=//adds the jqXHR to the pendingProductCreations-object
				$.ajax({
					type: 'POST',
					url: 'commands.cshtml',
					data: data,
					context:newProductNameCell
				})
				.fail(productCreationFail)@*This handler is not called for cross-domain script and JSONP requests*@
				.done(productCreationDone);
				numProducts++;
				productClientId++
			}
			function cancelCreateProduct() {
			$(document.body).focus();
				$("#mainTableBody th:last-child, #mainTableBody td:last-child").remove();
				document.getElementById("addNewProduct").style.visibility="visible";
				$("#mainTableBody .editable").attr("contenteditable", true);@*Make all cells editable again*@
				$("#newProductButtonContainer").remove();
			}
			function cellOnFocus(event) {
				cellOriginalValue=$(event.target).text();
			}
			function cellOnBlur(event) {@*When a cell loses focus and has been changed it should post an updateCell-command*@
				if ($(event.target).text()!=cellOriginalValue) {
					if (!$(event.target).text().length)
						if ($(event.target).hasClass("required")) {
							$(event.target).text(cellOriginalValue);
							return;
						}
					if ($(event.target).data("productId")!=undefined) {//if productId of cell is present
						sendCellChange(event.target)();
					} else {//if productId is undefined. this happens if the product of an edited cell is newly created and there hasn't been a response of the product-creation from the server yet
						//the ajax-request now needs to be queued so that it executes as soon as the server responds with the productId
						pendingProductCreations[$(event.target).data("productClientId")].done(sendCellChange(event.target));
					}
				}
			}
			function sendCellChange(target) {
				return function () {@*By having sendCellChange return an anonymous function it is possible to pass it as an event-handler while still passing an argument, because the anon-func will hav access to the arhument passed to sendCellChange*@
					var data="action=updateCell&productId="+$(target).data("productId")+"&productHeader="+$(target).data("productHeader")+"&newValue="+$(target).text();
					$.ajax( {
						type: 'POST',
						url: 'commands.cshtml',
						data: data
					})
					.done(cellEditDone)
					.fail(cellEditFail);
				}
			}
			function productCreationFail() {
				
			}
			// let all cells of created products have a dynamic class like "productClientId_2", and pass productClientId to success-handler. but this could be "passed" by setting it to data() on context-object.
			function productCreationDone(data) {//when a product has been created the id in the response should be grabbed and entered into the cells of that product
				var productClientId=$(this).data("productClientId");
				delete pendingProductCreations[productClientId];
				data=$.parseJSON(data);
				$("#mainTableBody .cid"+productClientId)//get all the cells of the product using by selecting their class using clientId
				.removeClass("cid"+productClientId)//now remove clientId-selector-class, wont be needed anymore because we have real id now
				.removeData("productClientId")//same with the clientId-data of course
				.addClass("id"+data.id)//set the new selector-class using the returned id
				.data("productId",data.id);//set productId of all the cells to the id that the server returned
			}
			function cellEditDone() {

			}
			function cellEditFail(one, two, three) {
			}

		</script>
	</body>
</html>
@*//if needed to create cssRule//http://www.rainbodesign.com/pub/css/css-javascript.html
			var sheet=document.styleSheets[0];
var rules=sheet["rules"]||sheet["cssRules"]
sheet.insertRule(".vertical{margin-left:38px}", 0);
*@