@{
	//http://psdreview.com/best-free-android-icon-sets-for-developers-and-designers/
	string activeCategory="sjokolade";

	@*The following is a list of product-headers that are to be sent and that will be visible and editable in the html. Their order also determine the order in the html*@
	List<ProductProperty> productProperties=new List<ProductProperty>{new ProductProperty("name", "Name", "string", true), new ProductProperty("ean", "EAN", "int"), new ProductProperty("epd", "EPD", "int", true), new ProductProperty("qntInUnit", "Quantity in Unit", "int"), new ProductProperty("unit", "Unit", "string"), new ProductProperty("producer", "Producer", "string")};
	@*The following is a list of product-headers that are to be sent but which will be hidden in the html*@
	//List<string> hiddenProductHeaders=new List<string>{"id"};
	var db = Database.Open("products");
	string queryCommand;

	queryCommand="SELECT id";
	for (int i=0; i<productProperties.Count; i++) {
			queryCommand+=", ";
		queryCommand+=productProperties[i].name;
	}
	
	queryCommand+=" from products WHERE category = '"+activeCategory+"'";
	//selectCommand="SELECT name, ean, epd, qntInUnit, unit, producer from products WHERE category = 'sjokolade'";
	var selectedData = db.Query(queryCommand);
	string jsProductsData="[";

	@*http://blogs.microsoft.co.il/blogs/pini_dayan/archive/2009/03/12/convert-objects-to-json-in-c-using-javascriptserializer.aspx*@
	System.Web.Script.Serialization.JavaScriptSerializer oSerializer = new System.Web.Script.Serialization.JavaScriptSerializer();
string sJSON = oSerializer.Serialize(productProperties);

	int productNum=0;
		foreach(var product in selectedData){
			jsProductsData+="["+product["id"];
			for (int i=0; i<productProperties.Count; i++) {
				jsProductsData+=",";
				jsProductsData+="'"+product[productProperties[i].name.ToString()]+"'";
			}
			jsProductsData+="],";
			if (productNum<selectedData.Count()) {
			productNum++;
			}
		}
		jsProductsData+="]";
}
<!DOCTYPE html>

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>Stockex</title>
		<link rel="stylesheet" type="text/css" href="stockexStyle.css">
		<script src="jquery-1.9.0.min.js"></script>
		<script src="jquery.rotateTableCellContent.js"></script>
		<script src="json2.js"></script>
	</head>
	<body>
		<div id="tableContainer">
			<table id="mainTable">
			</table>
		</div>
		<div id="addNewProduct"></div>
		<script type="text/javascript">
			var productProps=@Html.Raw(sJSON);
			var productDataArray=@Html.Raw(jsProductsData);
			var mainTableInnerHTML = "";
			var cellOriginalValue;@*Holds the initial value of cell which the "new" value is compared with on cell-blur in order to determine if change has been made before sending to server*@//col="+productProps[x].name
			var numProducts=@productNum;
			var internalProductId=0;@*When creating a new product the client first assigns it with an internal id which is then sent to server.
			...The server then includes this id in the result so the client know which new item the response refers to. This is mainly in case of that the responses arrive in different order than the products ere created*@

			var mainTable=document.getElementById("mainTable");
			var tr, td, th;
			for (var x = 0; x<@productProperties.Count; x++ ) {
				tr=document.createElement("tr");
				tr.appendChild(th=document.createElement("th"));
				$(th).text(productProps[x].displayName);
				for (var y = 0; y<numProducts; y++) {
					tr.appendChild(td=document.createElement("td"));
					td.contentEditable=true;
					td.className="editable";
					if (!x)
						td.className+=" vertical";
					td.spellcheck=false;
					$(td).on("blur", cellOnBlur)
					.on("focus", cellOnFocus)
					.data("productHeader", productProps[x].name)
					.data("productId", productDataArray[y][0])
					.text(productDataArray[y][x+1]);
				}
				mainTable.appendChild(tr);
			}
			//productDataArray=null;
			document.getElementById("addNewProduct").onclick=addNewProduct;

			function addNewProduct() {@*Function for "creating a new" empty product on client-side only before sending to server*@
				$("#mainTable .editable").attr("contenteditable", false);@*Make all cells non editable while creating new product*@
				for (var y=0; y<productProps.length; y++) {
					var mainTable=document.getElementById("mainTable");
					var newCell=mainTable.rows[y].insertCell(numProducts+1);
					newCell.name=productProps[y].name;
					newCell.contentEditable=true;
					newCell.className="newProductInput editable";
					newCell.spellcheck=false;
					if (productProps[y].required)
						newCell.className+=" required";
					if (productProps[y].type=="int")
						newCell.onkeypress=validate;
					if (!y)
					newCell.focus();
				}
				var buttonContainer;
				document.getElementById("tableContainer").appendChild(buttonContainer=document.createElement("div"));
				buttonContainer.id="newProductButtonContainer";

				var okBtn;
				buttonContainer.appendChild(okBtn=document.createElement("button"));
				okBtn.innerHTML="OK";
				okBtn.id="newProductOkBtn";
				okBtn.onclick=createProduct;

				var cancelBtn;
				buttonContainer.appendChild(cancelBtn=document.createElement("button"));
				cancelBtn.innerHTML="Cancel";
				cancelBtn.id="newProductCancelBtn";
				cancelBtn.onclick=cancelCreateProduct;

				document.getElementById("addNewProduct").style.visibility="hidden";
             
				return false;
			}
			function validate(evt) {@*http://stackoverflow.com/a/469419*@
				var theEvent = evt || window.event;
				var key = theEvent.keyCode || theEvent.which;
				key = String.fromCharCode( key );
				var regex = /[0-9]/;
				if( !regex.test(key) ) {
				theEvent.returnValue = false;
				if(theEvent.preventDefault) theEvent.preventDefault();
				}
			}        
             
			function createProduct() {@*Function for sending new product data to server when OK is clicked*@
				var requiredInputs=$("#mainTable .required");
				for (var i=requiredInputs.length-1; i>=0; i--) {
					if (!requiredInputs[i].textContent.length) {
						alert("Please fill all required fields");
						return;
					}
				}
				$("#mainTable .editable").attr("contenteditable", true);@*Make all cells editable again*@
				document.getElementById("addNewProduct").style.visibility="visible";
				$("#newProductButtonContainer").remove();
                 
				var data="action=createProduct";
				$("#mainTable .newProductInput")
				.each(function(key, value) {
					if (value.textContent)
						data+="&"+value.name+"="+value.textContent;
				})
				.removeClass("newProductInput")
				.on("onblur", cellOnBlur)
				.attr("onfocus", cellOnFocus);
				$.ajax( {
					type: 'POST',
					url: 'commands.cshtml',
					data: data, 
					success: function(data) {
						//alert(data);
					}
				});
				numProducts++;
			}
			function cancelCreateProduct() {
			$(document.body).focus();
				$("#mainTable th:last-child, #mainTable td:last-child").remove();
				document.getElementById("addNewProduct").style.visibility="visible";
				$("#mainTable .editable").attr("contenteditable", true);@*Make all cells editable again*@
				$("#newProductButtonContainer").remove();
			}
			function cellOnFocus(event) {
				cellOriginalValue=$(event.target).text();
			}
			function cellOnBlur(event) {@*When a cell loses focus and has been changed it should post an updateCell-command*@
				if ($(event.target).text()!=cellOriginalValue) {
			var data="action=updateCell&productId="+$(event.target).data("productId")+"&productHeader="+$(event.target).data("productHeader")+"&newValue="+$(event.target).text();
					$.ajax( {
						type: 'POST',
						url: 'commands.cshtml',
						data: data, 
						success: function(data) {
						}
					});
				}
			}
		</script>
	</body>
</html>
